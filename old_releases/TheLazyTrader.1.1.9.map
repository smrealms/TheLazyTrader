ExecuteGUI -> ExecuteGUI:
    void main(java.lang.String[]) -> main
    void doMain() -> a
controller.GoodFinder -> controller.GoodFinder:
controller.RouteHandler -> controller.RouteHandler:
    java.text.DecimalFormat df -> a
    long numberOfRoutes -> a
    model.Universe universe -> a
    long startSector -> b
    long endSector -> c
    long maxDistance -> d
    long maxNumberOfPorts -> e
    java.util.Map races -> a
    java.util.Map goods -> b
    int typeOfRoute -> a
    boolean doSave -> a
    java.io.File saveFile -> a
    boolean distancesChangedSinceLastRun -> b
    boolean routesChangedSinceLastRun -> c
    java.util.Map distances -> c
    java.util.NavigableMap[] allRoutes -> a
    java.lang.String doInBackground(controller.RouteSwingWorker) -> a
    java.lang.String getTopRoutesString() -> getTopRoutesString
    void saveTopRoutes() -> a
    long getEndSector() -> getEndSector
    void setEndSector(long) -> setEndSector
    java.util.Map getGoods() -> getGoods
    void setGoods(java.util.Map) -> setGoods
    long getMaxDistance() -> getMaxDistance
    void setMaxDistance(long) -> setMaxDistance
    long getMaxNumberOfPorts() -> getMaxNumberOfPorts
    void setMaxNumberOfPorts(long) -> setMaxNumberOfPorts
    long getNumberOfRoutes() -> getNumberOfRoutes
    void setNumberOfRoutes(long) -> setNumberOfRoutes
    java.util.Map getRaces() -> getRaces
    void setRaces(java.util.Map) -> setRaces
    int getTypeOfRoute() -> getTypeOfRoute
    void setTypeOfRoute(int) -> setTypeOfRoute
    long getStartSector() -> getStartSector
    void setStartSector(long) -> setStartSector
    model.Universe getUniverse() -> getUniverse
    void setUniverse(model.Universe) -> setUniverse
    boolean isDoSave() -> isDoSave
    void setDoSave(boolean) -> setDoSave
    java.io.File getSaveFile() -> getSaveFile
    void setSaveFile(java.io.File) -> setSaveFile
controller.RouteSwingWorker -> controller.RouteSwingWorker:
    javax.swing.JTextArea routeDisplay -> a
    controller.RouteHandler routeHandler -> a
    javax.swing.JProgressBar progressBar -> a
    void done() -> done
    void publishProgress(java.lang.String) -> a
    void process(java.util.List) -> process
    java.lang.Object doInBackground() -> doInBackground
controller.fileaccess.DatabaseIniParser -> controller.fileaccess.DatabaseIniParser:
    org.ini4j.Ini mapFile -> a
    void run() -> run
    void parseRaces() -> a
    void parseGoods() -> b
    void parseShipEquipment() -> c
    void parseShipAbilities() -> d
    void parseShips() -> e
    void parseWeapons() -> f
    void parseLocations() -> g
controller.fileaccess.DatabaseParser -> controller.fileaccess.DatabaseParser:
controller.fileaccess.SMRIniParser -> controller.fileaccess.SMRIniParser:
    org.ini4j.Ini mapFile -> a
    model.Universe storedUni -> a
    model.Universe getUniverse() -> getUniverse
    java.util.Map getGalaxies() -> getGalaxies
    void run() -> run
    void parseGalaxies() -> a
    void parseSectors() -> b
controller.fileaccess.UniverseParser -> controller.fileaccess.UniverseParser:
    model.Universe getUniverse() -> getUniverse
    java.util.Map getGalaxies() -> getGalaxies
controller.pathfinding.DiCalculator -> controller.pathfinding.DiCalculator:
    int findNearestGoodWithStatus(model.Sector[],int,int,int) -> a
controller.pathfinding.Pathfinding -> controller.pathfinding.Pathfinding:
    java.util.Map findDistanceToX(java.lang.Object,model.Sector[],int,long,long,long) -> a
controller.pathfinding.RouteGenerator -> controller.pathfinding.RouteGenerator:
    java.util.concurrent.ExecutorService executor -> a
    java.util.NavigableMap expRoutes -> a
    java.util.NavigableMap moneyRoutes -> b
    controller.RouteSwingWorker publishProgressTo -> a
    int trimToBestXRoutes -> a
    double[] dontAddWorseThan -> a
    int totalTasks -> b
    int tasksCompleted -> c
    java.util.NavigableMap[] generateMultiPortRoutes(long,model.Sector[],java.util.Map,java.util.Map,java.util.Map) -> a
    java.util.NavigableMap[] findMultiPortRoutes(long,java.util.Map) -> a
    void publishProgress() -> a
    void startRoutesToContinue(long,int,java.util.ArrayList,java.util.Map) -> a
    void getContinueRoutes(long,int,model.Route,java.util.ArrayList,java.util.Map,boolean) -> a
    java.util.NavigableMap[] generateOneWayRoutes(model.Sector[],java.util.Map,java.util.Map,java.util.Map) -> a
    void addExpRoute(model.Route) -> a
    void addMoneyRoute(model.Route) -> b
    void setPublishProgressTo(controller.RouteSwingWorker) -> setPublishProgressTo
    void trimRoutes() -> b
controller.pathfinding.RouteGenerator$1 -> controller.pathfinding.RouteGenerator$1:
    long val$maxNumPorts -> a
    java.util.Map$Entry val$es -> a
    java.util.Map val$routeLists -> a
    java.lang.Object call() -> call
controller.pathfinding.RouteGenerator$2 -> controller.pathfinding.RouteGenerator$2:
    java.lang.Object call() -> call
loci.visbio.util.BrowserLauncher -> loci.visbio.util.BrowserLauncher:
    int jvm -> a
    java.lang.Object theBrowser -> a
    boolean loadedWithoutErrors -> a
    java.lang.Class mrjFileUtilsClass -> a
    java.lang.Class mrjOSTypeClass -> b
    java.lang.Class aeDescClass -> c
    java.lang.reflect.Constructor aeTargetConstructor -> a
    java.lang.reflect.Constructor appleEventConstructor -> b
    java.lang.reflect.Constructor aeDescConstructor -> c
    java.lang.reflect.Method findFolder -> a
    java.lang.reflect.Method getFileCreator -> b
    java.lang.reflect.Method getFileType -> c
    java.lang.reflect.Method openURL -> d
    java.lang.reflect.Method makeOSType -> e
    java.lang.reflect.Method putParameter -> f
    java.lang.reflect.Method sendNoReply -> g
    java.lang.Object kSystemFolderType -> b
    java.lang.Integer keyDirectObject -> a
    java.lang.Integer kAutoGenerateReturnID -> b
    java.lang.Integer kAnyTransactionID -> c
    java.lang.String errorMessage -> a
    boolean loadClasses() -> a
    java.lang.Object locateBrowser() -> a
    void openURL(java.lang.String) -> a
    int ICStart(int[],int) -> a
    int ICStop(int[]) -> a
    int ICLaunchURL(int,byte[],byte[],int,int[],int[]) -> a
model.Connection -> model.Connection:
    java.lang.String type -> a
    int targetSector -> a
    java.lang.String getType() -> getType
    int getTargetSector() -> getTargetSector
model.Distance -> model.Distance:
    int distance -> a
    int numWarps -> b
    int startSectorId -> c
    int endSectorId -> d
    java.util.ArrayList path -> a
    void setDistance(int) -> setDistance
    void setNumWarps(int) -> setNumWarps
    void incrementDistance() -> a
    void incrementNumWarps() -> b
    int getDistance() -> getDistance
    int getNumWarps() -> getNumWarps
    model.Distance clone() -> a
    double getTurns() -> getTurns
    int getEndSectorId() -> getEndSectorId
    void setEndSectorId(int) -> setEndSectorId
    int getStartSectorId() -> getStartSectorId
    java.util.ArrayList getPath() -> getPath
    void addToPath(int) -> a
    java.lang.Object clone() -> clone
    int compareTo(java.lang.Object) -> compareTo
model.Galaxy -> model.Galaxy:
    int galaxyId -> a
    int width -> b
    int height -> c
    int startSectorId -> d
    int endSectorId -> e
    java.lang.String type -> a
    java.lang.String name -> b
    int getGalaxyId() -> getGalaxyId
    void setGalaxyId(int) -> setGalaxyId
    int getHeight() -> getHeight
    void setHeight(int) -> setHeight
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getType() -> getType
    void setType(java.lang.String) -> setType
    int getWidth() -> getWidth
    void setWidth(int) -> setWidth
    int getEndSectorId() -> getEndSectorId
    void setEndSectorId(int) -> setEndSectorId
    int getStartSectorId() -> getStartSectorId
    void setStartSectorId(int) -> setStartSectorId
    java.lang.String toString() -> toString
model.Good -> model.Good:
    java.util.NavigableMap GOOD_NAMES -> a
    java.util.NavigableMap GOOD_VALUES -> b
    boolean[] EXISTS -> a
    int state -> a
    int goodId -> b
    int distanceIndex -> c
    void setState(int) -> setState
    void setDistanceIndex(int) -> setDistanceIndex
    int getState() -> getState
    int getDistanceIndex() -> getDistanceIndex
    java.lang.String getName(int) -> getName
    java.util.Map getNames() -> getNames
    int getValue(int) -> getValue
    void addGood(java.lang.Integer,java.lang.String,java.lang.Integer) -> a
    int getId(java.lang.String) -> a
    int getGoodId() -> getGoodId
    boolean matchesState(int) -> a
model.HasRace -> model.HasRace:
    int getRace() -> getRace
model.ListTooBigException -> model.ListTooBigException:
model.Location -> model.Location:
    java.util.NavigableMap locationSingletons -> a
    java.util.NavigableMap locationSingletonsByType -> b
    java.lang.String locationName -> a
    java.lang.String type -> b
    java.util.ArrayList ships -> a
    java.util.ArrayList weapons -> b
    java.util.ArrayList shipEquipment -> c
    model.Location getLocation(java.lang.String) -> a
    java.util.NavigableMap getLocations() -> getLocations
    void putLocation(model.Location) -> a
    java.util.NavigableMap getLocationByType(java.lang.String) -> a
    java.util.NavigableMap getLocationsByType() -> getLocationsByType
    java.lang.String getName() -> getName
    java.util.ArrayList getShipEquipment() -> getShipEquipment
    void setShipEquipment(java.util.ArrayList) -> setShipEquipment
    void addShipEquipment(model.ship.ShipEquipment) -> a
    java.util.ArrayList getShips() -> getShips
    void setShips(java.util.ArrayList) -> setShips
    void addShip(model.ship.Ship) -> a
    java.util.ArrayList getWeapons() -> getWeapons
    void setWeapons(java.util.ArrayList) -> setWeapons
    void addWeapon(model.Weapon) -> a
    boolean hasX(java.lang.Object) -> a
    java.lang.String toString() -> toString
    java.lang.String getType() -> getType
    void setType(java.lang.String) -> setType
model.MultiplePortRoute -> model.MultiplePortRoute:
    model.Route forwardRoute -> a
    model.Route returnRoute -> b
    void setForwardRoute(model.Route) -> setForwardRoute
    void setReturnRoute(model.Route) -> setReturnRoute
    model.Route getForwardRoute() -> getForwardRoute
    model.Route getReturnRoute() -> getReturnRoute
model.OneWayRoute -> model.OneWayRoute:
    int sellSectorId -> a
    int buySectorId -> b
    int sellDi -> c
    int buyDi -> d
    model.Distance distance -> a
    int goodId -> e
    int sellPortRace -> f
    int buyPortRace -> g
    void setSellSectorId(int) -> setSellSectorId
    void setBuySectorId(int) -> setBuySectorId
    void setSellPortRace(int) -> setSellPortRace
    void setBuyPortRace(int) -> setBuyPortRace
    void setSellDi(int) -> setSellDi
    void setBuyDi(int) -> setBuyDi
    void setDistance(model.Distance) -> setDistance
    void setGoodId(int) -> setGoodId
    int getSellSectorId() -> getSellSectorId
    int getBuySectorId() -> getBuySectorId
    int getSellPortRace() -> getSellPortRace
    int getBuyPortRace() -> getBuyPortRace
    int getSellDi() -> getSellDi
    int getBuyDi() -> getBuyDi
    model.Distance getDistance() -> getDistance
    int getGoodId() -> getGoodId
    double getOverallExpMultiplier() -> getOverallExpMultiplier
    double getOverallMoneyMultiplier() -> getOverallMoneyMultiplier
    double getTurnsForRoute() -> getTurnsForRoute
    int compareTo(java.lang.Object) -> compareTo
    model.OneWayRoute getForwardRoute() -> getForwardRoute
    model.OneWayRoute getReturnRoute() -> getReturnRoute
    java.lang.String getRouteString() -> getRouteString
    model.Route getForwardRoute() -> getForwardRoute
    model.Route getReturnRoute() -> getReturnRoute
model.Port -> model.Port:
    int portLevel -> a
    int portRace -> b
    java.util.Map goods -> a
    void setPortLevel(int) -> setPortLevel
    void setPortRace(int) -> setPortRace
    void setGoodDistance(int,int) -> setGoodDistance
    int getGoodStatus(int) -> getGoodStatus
    int getPortLevel() -> getPortLevel
    int getPortRace() -> getPortRace
    int getGoodDistance(int) -> getGoodDistance
    java.util.Map getGoods() -> getGoods
model.Race -> model.Race:
    java.util.NavigableMap RACE_NAMES -> a
    java.lang.String name -> a
    int id -> a
    java.lang.String getName(int) -> getName
    int getId(java.lang.String) -> a
    void addRace(model.Race) -> a
    java.util.NavigableMap getRaces() -> getRaces
    model.Race getRace(int) -> getRace
    int getNumberOfRaces() -> getNumberOfRaces
    int getId() -> getId
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
model.Route -> model.Route:
    double getOverallExpMultiplier() -> getOverallExpMultiplier
    double getOverallMoneyMultiplier() -> getOverallMoneyMultiplier
    double getTurnsForRoute() -> getTurnsForRoute
    model.Route getForwardRoute() -> getForwardRoute
    model.Route getReturnRoute() -> getReturnRoute
    java.lang.String getRouteString() -> getRouteString
model.Sector -> model.Sector:
    int sectorId -> a
    int galaxyId -> b
    java.util.ArrayList connections -> a
    java.util.ArrayList warps -> b
    model.Port port -> a
    java.util.ArrayList locations -> c
    void setSectorID(int) -> setSectorID
    void setGalaxyID(int) -> setGalaxyID
    void setConnections(java.util.ArrayList) -> setConnections
    void addConnection(java.lang.String,int) -> a
    void setWarps(java.util.ArrayList) -> setWarps
    void setPort(int) -> setPort
    void setPort(model.Port) -> setPort
    void setPlanet(int) -> setPlanet
    void setPlanet(boolean) -> setPlanet
    int getSectorID() -> getSectorID
    int getGalaxyID() -> getGalaxyID
    java.util.ArrayList getConnections() -> getConnections
    java.util.ArrayList getWarps() -> getWarps
    boolean hasPort() -> a
    model.Port getPort() -> getPort
    boolean hasLocation() -> b
    java.util.ArrayList getLocations() -> getLocations
    boolean hasX(java.lang.Object) -> a
model.SectorList -> model.SectorList:
    int size -> a
    int MAX_SIZE -> b
    model.Sector[] data -> a
    void ensureCapacity(int) -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    model.SectorList clone() -> a
    model.Sector get(int) -> get
    model.SectorList getLast(int) -> getLast
    model.Sector getFirst() -> getFirst
    model.Sector get() -> get
    boolean add(model.Sector) -> a
    void clear() -> clear
    void removeRange(int,int) -> removeRange
    void checkBoundExclusive(int) -> b
    java.lang.Object clone() -> clone
    java.lang.Object get(int) -> get
    java.lang.Object[] toArray() -> toArray
    void add(int,java.lang.Object) -> add
    boolean add(java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object remove(int) -> remove
model.Universe -> model.Universe:
    java.util.Map galaxies -> a
    model.Sector[] sectors -> a
    java.util.Map getGalaxies() -> getGalaxies
    void setGalaxies(java.util.Map) -> setGalaxies
    model.Sector[] getSectors() -> getSectors
    void setSectors(model.Sector[]) -> setSectors
    model.Galaxy getGalaxy(int) -> getGalaxy
model.Weapon -> model.Weapon:
    java.util.NavigableMap WEAPONS -> a
    java.util.NavigableMap WEAPONS_BY_POWER -> b
    java.lang.String name -> a
    int race -> a
    int cost -> b
    int shieldDamage -> c
    int armourDamage -> d
    int accuracy -> e
    int powerLevel -> f
    int empDamage -> g
    boolean isEmpInPercent -> a
    java.util.ArrayList restrictions -> a
    void addWeapon(model.Weapon) -> a
    model.Weapon getWeapon(java.lang.String) -> a
    java.util.NavigableMap getWeapons() -> getWeapons
    java.util.NavigableMap getWeaponByPower(int) -> getWeaponByPower
    java.util.NavigableMap getWeaponsByPower() -> getWeaponsByPower
    int getArmourDamage() -> getArmourDamage
    void setArmourDamage(int) -> setArmourDamage
    int getCost() -> getCost
    void setCost(int) -> setCost
    int getEmpDamage() -> getEmpDamage
    void setEmpDamage(int) -> setEmpDamage
    boolean isEmpInPercent() -> isEmpInPercent
    void setEmpInPercent(boolean) -> setEmpInPercent
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    int getPowerLevel() -> getPowerLevel
    void setPowerLevel(int) -> setPowerLevel
    int getRace() -> getRace
    void setRace(int) -> setRace
    java.util.ArrayList getRestrictions() -> getRestrictions
    void addRestriction(model.ship.Restriction) -> a
    int getShieldDamage() -> getShieldDamage
    void setShieldDamage(int) -> setShieldDamage
    int getAccuracy() -> getAccuracy
    void setAccuracy(int) -> setAccuracy
    java.lang.String toString() -> toString
model.preferences.GeneralPreferences -> model.preferences.GeneralPreferences:
    boolean askForMemory -> a
    int memoryToAllocate -> a
    boolean askForMemory() -> a
    void setAskForMemory(boolean) -> setAskForMemory
    int getMemoryToAllocate() -> getMemoryToAllocate
    void setMemoryToAllocate(int) -> setMemoryToAllocate
model.preferences.ParsingPreferences -> model.preferences.ParsingPreferences:
    java.lang.String SMRFileParserPath -> a
    java.lang.String getSMRFileParserPath() -> getSMRFileParserPath
    void setSMRFileParserPath(java.lang.String) -> setSMRFileParserPath
model.preferences.PlayerPreferences -> model.preferences.PlayerPreferences:
    java.util.NavigableMap relations -> a
    java.util.NavigableMap getRelations() -> getRelations
    void setRelation(int,int) -> setRelation
    java.lang.Integer getRelationsForRace(int) -> getRelationsForRace
model.preferences.RoutePreferences -> model.preferences.RoutePreferences:
    boolean useRelationsFactor -> a
    boolean useRelationsFactor() -> a
    void setUseRelationsFactor(boolean) -> setUseRelationsFactor
model.ship.Restriction -> model.ship.Restriction:
    java.lang.String name -> a
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    int compareTo(java.lang.Object) -> compareTo
    java.lang.String toString() -> toString
model.ship.Ship -> model.ship.Ship:
    java.util.Map SHIPS -> a
    java.lang.String name -> a
    int race -> a
    int cost -> b
    int repairRate -> c
    int manu -> d
    int hardpoints -> e
    int shields -> f
    int armour -> g
    int cargo -> h
    int combats -> i
    int scouts -> j
    int mines -> k
    java.util.ArrayList equipment -> a
    java.util.ArrayList abilities -> b
    model.ship.Restriction restriction -> a
    void addShip(model.ship.Ship) -> a
    model.ship.Ship getShip(java.lang.String) -> a
    java.util.Map getShips() -> getShips
    int getArmour() -> getArmour
    void setArmour(int) -> setArmour
    int getCargo() -> getCargo
    void setCargo(int) -> setCargo
    int getCombats() -> getCombats
    void setCombats(int) -> setCombats
    int getCost() -> getCost
    void setCost(int) -> setCost
    int getPower() -> getPower
    int getHardpoints() -> getHardpoints
    void setHardpoints(int) -> setHardpoints
    int getMines() -> getMines
    void setMines(int) -> setMines
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    int getRace() -> getRace
    void setRace(int) -> setRace
    int getRepairRate() -> getRepairRate
    void setRepairRate(int) -> setRepairRate
    int getScouts() -> getScouts
    void setScouts(int) -> setScouts
    int getShields() -> getShields
    void setShields(int) -> setShields
    void addEquipment(model.ship.ShipEquipment) -> a
    java.util.ArrayList getEquipments() -> getEquipments
    void addAbility(model.ship.ShipAbility) -> a
    java.util.ArrayList getAbilities() -> getAbilities
    int getManu() -> getManu
    void setManu(int) -> setManu
    model.ship.Restriction getRestriction() -> getRestriction
    void setRestriction(model.ship.Restriction) -> setRestriction
    java.lang.String toString() -> toString
model.ship.ShipAbility -> model.ship.ShipAbility:
    java.lang.String name -> a
    java.lang.String description -> b
    java.util.NavigableMap SHIP_ABILITIES -> a
    void addShipAbility(model.ship.ShipAbility) -> a
    model.ship.ShipAbility getShipAbility(java.lang.String) -> a
    java.util.NavigableMap getShipAbilities() -> getShipAbilities
    java.lang.String getDescription() -> getDescription
    void setDescription(java.lang.String) -> setDescription
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
model.ship.ShipEquipment -> model.ship.ShipEquipment:
    java.lang.String name -> a
    int cost -> a
    java.lang.String description -> b
    java.util.NavigableMap SHIP_EQUIPMENTS -> a
    void addShipEquipment(model.ship.ShipEquipment) -> a
    model.ship.ShipEquipment getShipEquipment(java.lang.String) -> a
    java.util.NavigableMap getShipEquipments() -> getShipEquipments
    int getCost() -> getCost
    void setCost(int) -> setCost
    java.lang.String getDescription() -> getDescription
    void setDescription(java.lang.String) -> setDescription
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String toString() -> toString
org.ini4j.AbstractBeanInvocationHandler -> org.ini4j.AbstractBeanInvocationHandler:
    int ADD_PREFIX_LEN -> a
    int REMOVE_PREFIX_LEN -> b
    int READ_PREFIX_LEN -> c
    int READ_BOOLEAN_PREFIX_LEN -> d
    int WRITE_PREFIX_LEN -> e
    int HAS_PREFIX_LEN -> f
    java.beans.PropertyChangeSupport _pcSupport -> a
    java.beans.VetoableChangeSupport _vcSupport -> a
    java.lang.Object _proxy -> a
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    java.lang.Object getProperty(java.lang.String,java.lang.Class) -> b
    java.lang.Object getPropertySpi(java.lang.String,java.lang.Class) -> a
    void setProperty(java.lang.String,java.lang.Object,java.lang.Class) -> a
    void setPropertySpi$7fec8f7e(java.lang.String,java.lang.Object) -> a
    boolean hasProperty(java.lang.String) -> b
    boolean hasPropertySpi(java.lang.String) -> a
    void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener) -> a
    void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener) -> b
    void addVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener) -> a
    void removeVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener) -> b
    void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object) -> a
    void fireVetoableChange(java.lang.String,java.lang.Object,java.lang.Object) -> b
    java.lang.Object getProxy() -> getProxy
    java.lang.Object zero(java.lang.Class) -> a
    java.lang.Object parseValue(java.lang.String,java.lang.Class) -> c
    java.lang.Object parseSpecialValue(java.lang.String,java.lang.Class) -> d
org.ini4j.Convert -> org.ini4j.Convert:
    char[] HEX -> a
    java.lang.String escape(java.lang.String) -> a
    java.lang.String unescape(java.lang.String) -> b
org.ini4j.Ini -> org.ini4j.Ini:
    int SUBST_BEGIN_LEN -> a
    int SUBST_END_LEN -> b
    org.ini4j.Ini$Section add(java.lang.String) -> a
    org.ini4j.Ini$Section remove(org.ini4j.Ini$Section) -> a
    void store(java.io.Writer) -> a
    void load(java.io.InputStream) -> a
    void load(java.io.Reader) -> a
    void load(java.net.URL) -> a
    void resolve(java.lang.StringBuilder,org.ini4j.Ini$Section) -> a
org.ini4j.Ini$BeanInvocationHandler -> org.ini4j.Ini$BeanInvocationHandler:
    java.lang.Object getPropertySpi(java.lang.String,java.lang.Class) -> a
    void setPropertySpi$7fec8f7e(java.lang.String,java.lang.Object) -> a
    boolean hasPropertySpi(java.lang.String) -> a
org.ini4j.Ini$Builder -> org.ini4j.Ini$Builder:
    org.ini4j.Ini$Section currentSection -> a
    org.ini4j.Ini this$0 -> a
    void startSection(java.lang.String) -> a
    void endSection() -> a
    void handleOption(java.lang.String,java.lang.String) -> a
org.ini4j.Ini$Section -> org.ini4j.Ini$Section:
    java.lang.String _name -> a
    java.util.Map _beans -> a
    org.ini4j.Ini this$0 -> a
    java.lang.String getName() -> getName
    java.lang.Object to(java.lang.Class) -> a
    java.lang.String fetch(java.lang.Object) -> a
org.ini4j.Ini$Section$BeanInvocationHandler -> org.ini4j.Ini$Section$BeanInvocationHandler:
    org.ini4j.Ini$Section this$1 -> a
    java.lang.Object getPropertySpi(java.lang.String,java.lang.Class) -> a
    void setPropertySpi$7fec8f7e(java.lang.String,java.lang.Object) -> a
    boolean hasPropertySpi(java.lang.String) -> a
org.ini4j.IniFile -> org.ini4j.IniFile:
    org.ini4j.IniFile$Mode getMode() -> getMode
    java.io.File getFile() -> getFile
    void sync() -> sync
    void flush() -> flush
org.ini4j.IniFile$Mode -> org.ini4j.IniFile$Mode:
    org.ini4j.IniFile$Mode RO -> a
    org.ini4j.IniFile$Mode WO -> b
    org.ini4j.IniFile$Mode RW -> c
org.ini4j.IniHandler -> org.ini4j.IniHandler:
    void startSection(java.lang.String) -> a
    void endSection() -> a
    void handleOption(java.lang.String,java.lang.String) -> a
org.ini4j.IniParser -> org.ini4j.IniParser:
    org.ini4j.IniParser newInstance() -> a
    void parse(java.io.Reader,org.ini4j.IniHandler) -> a
    void parse(java.net.URL,org.ini4j.IniHandler) -> a
    java.lang.String unescape(java.lang.String) -> a
    void parseError(java.lang.String,int) -> a
org.ini4j.IniParser$1XML2Ini -> org.ini4j.IniParser$1XML2Ini:
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
org.ini4j.IniPreferences -> org.ini4j.IniPreferences:
    java.lang.String[] EMPTY -> a
    org.ini4j.Ini _ini -> a
    java.util.prefs.AbstractPreferences childSpi(java.lang.String) -> childSpi
    java.lang.String[] childrenNamesSpi() -> childrenNamesSpi
    void flushSpi() -> flushSpi
    java.lang.String getSpi(java.lang.String) -> getSpi
    java.lang.String[] keysSpi() -> keysSpi
    void putSpi(java.lang.String,java.lang.String) -> putSpi
    void removeNodeSpi() -> removeNodeSpi
    void removeSpi(java.lang.String) -> removeSpi
    void syncSpi() -> syncSpi
    org.ini4j.Ini getIni() -> getIni
    java.lang.String[] access$0() -> a
    org.ini4j.Ini access$1(org.ini4j.IniPreferences) -> a
org.ini4j.IniPreferences$SectionPreferences -> org.ini4j.IniPreferences$SectionPreferences:
    org.ini4j.Ini$Section _section -> a
    org.ini4j.IniPreferences this$0 -> a
    java.util.prefs.AbstractPreferences childSpi(java.lang.String) -> childSpi
    java.lang.String[] childrenNamesSpi() -> childrenNamesSpi
    void flushSpi() -> flushSpi
    java.lang.String getSpi(java.lang.String) -> getSpi
    java.lang.String[] keysSpi() -> keysSpi
    void putSpi(java.lang.String,java.lang.String) -> putSpi
    void removeNodeSpi() -> removeNodeSpi
    void removeSpi(java.lang.String) -> removeSpi
    void syncSpi() -> syncSpi
    void sync() -> sync
    void flush() -> flush
org.ini4j.IniPreferencesFactory -> org.ini4j.IniPreferencesFactory:
    java.util.prefs.Preferences _system -> a
    java.util.prefs.Preferences _user -> b
    java.util.prefs.Preferences systemRoot() -> systemRoot
    java.util.prefs.Preferences userRoot() -> userRoot
    java.util.prefs.Preferences newIniPreferences(java.lang.String) -> a
    java.lang.String getIniLocation(java.lang.String) -> a
    java.net.URL getResource(java.lang.String) -> a
    java.io.InputStream getResourceAsStream(java.lang.String) -> a
org.ini4j.InvalidIniFormatException -> org.ini4j.InvalidIniFormatException:
org.ini4j.PreferencesBean -> org.ini4j.PreferencesBean:
org.ini4j.PreferencesBean$1 -> org.ini4j.PreferencesBean$1:
    java.lang.Object getPropertySpi(java.lang.String,java.lang.Class) -> a
    void setPropertySpi$7fec8f7e(java.lang.String,java.lang.Object) -> a
    boolean hasPropertySpi(java.lang.String) -> a
org.ini4j.ServiceFinder -> org.ini4j.ServiceFinder:
    java.lang.String findServiceClassName(java.lang.String,java.lang.String) -> a
    java.lang.Class findServiceClass(java.lang.String,java.lang.String) -> a
    java.lang.Object findService(java.lang.String,java.lang.String) -> a
org.ini4j.addon.FancyIniParser -> org.ini4j.addon.FancyIniParser:
    boolean _allowEmptyOption -> a
    boolean _allowUnnamedSection -> b
    boolean _allowMissingSection -> c
    java.lang.String _missingSectionName -> a
    boolean _allowSectionCaseConversion -> d
    boolean _allowOptionCaseConversion -> e
    boolean _allowInclude -> f
    void setAllowEmptyOption(boolean) -> setAllowEmptyOption
    boolean isAllowEmptyOption() -> isAllowEmptyOption
    void setAllowUnnamedSection(boolean) -> setAllowUnnamedSection
    boolean isAllowUnnamedSection() -> isAllowUnnamedSection
    void setAllowMissingSection(boolean) -> setAllowMissingSection
    boolean isAllowMissingSection() -> isAllowMissingSection
    void setMissingSectionName(java.lang.String) -> setMissingSectionName
    java.lang.String getMissingSectionName() -> getMissingSectionName
    void setAllowSectionCaseConversion(boolean) -> setAllowSectionCaseConversion
    boolean isAllowSectionCaseConversion() -> isAllowSectionCaseConversion
    void setAllowOptionCaseConversion(boolean) -> setAllowOptionCaseConversion
    boolean isAllowOptionCaseConversion() -> isAllowOptionCaseConversion
    boolean isAllowInclude() -> isAllowInclude
    void setAllowInclude(boolean) -> setAllowInclude
    void parse(java.io.Reader,org.ini4j.IniHandler) -> a
    void parse(java.net.URL,org.ini4j.IniHandler) -> a
    void parse(org.ini4j.addon.FancyIniParser$IniSource,org.ini4j.IniHandler) -> a
org.ini4j.addon.FancyIniParser$IniSource -> org.ini4j.addon.FancyIniParser$IniSource:
    boolean allowInclude -> a
    java.net.URL base -> a
    java.util.Stack bases -> a
    java.io.LineNumberReader reader -> a
    java.util.Stack readers -> b
    void include(java.net.URL) -> a
    int getLineNumber() -> getLineNumber
    java.lang.String readLine() -> a
org.ini4j.addon.PreferencesWrapper -> org.ini4j.addon.PreferencesWrapper:
    void put(java.lang.String,java.lang.String) -> put
    java.lang.String get(java.lang.String,java.lang.String) -> get
    void remove(java.lang.String) -> remove
    void clear() -> clear
    void putInt(java.lang.String,int) -> putInt
    int getInt(java.lang.String,int) -> getInt
    void putLong(java.lang.String,long) -> putLong
    long getLong(java.lang.String,long) -> getLong
    void putBoolean(java.lang.String,boolean) -> putBoolean
    boolean getBoolean(java.lang.String,boolean) -> getBoolean
    void putFloat(java.lang.String,float) -> putFloat
    float getFloat(java.lang.String,float) -> getFloat
    void putDouble(java.lang.String,double) -> putDouble
    double getDouble(java.lang.String,double) -> getDouble
    void putByteArray(java.lang.String,byte[]) -> putByteArray
    byte[] getByteArray(java.lang.String,byte[]) -> getByteArray
    java.lang.String[] keys() -> keys
    java.lang.String[] childrenNames() -> childrenNames
    java.util.prefs.Preferences parent() -> parent
    java.util.prefs.Preferences node(java.lang.String) -> node
    boolean nodeExists(java.lang.String) -> nodeExists
    void removeNode() -> removeNode
    java.lang.String name() -> name
    java.lang.String absolutePath() -> absolutePath
    boolean isUserNode() -> isUserNode
    java.lang.String toString() -> toString
    void flush() -> flush
    void sync() -> sync
    void addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener) -> addPreferenceChangeListener
    void removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener) -> removePreferenceChangeListener
    void addNodeChangeListener(java.util.prefs.NodeChangeListener) -> addNodeChangeListener
    void removeNodeChangeListener(java.util.prefs.NodeChangeListener) -> removeNodeChangeListener
    void exportNode(java.io.OutputStream) -> exportNode
    void exportSubtree(java.io.OutputStream) -> exportSubtree
org.ini4j.addon.StrictPreferences -> org.ini4j.addon.StrictPreferences:
settings.Settings -> settings.Settings:
    int NUMBER_OF_PROCESSORS -> a
utils.swing.CloseTabListener -> utils.swing.CloseTabListener:
    javax.swing.JTabbedPane tabbedPane -> a
    javax.swing.JPopupMenu popup -> a
    int tabIndex -> a
    javax.swing.JMenuItem menuItem -> a
    int checkTabIndex(java.awt.Point) -> a
    void showPopup(java.awt.event.MouseEvent) -> a
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
utils.swing.DnDTabbedPane -> utils.swing.DnDTabbedPane:
    utils.swing.GhostGlassPane glassPane -> a
    java.awt.geom.Rectangle2D lineRect -> a
    java.awt.Color lineColor -> a
    java.awt.dnd.DragSource dragSource -> a
    int dragTabIndex -> a
    boolean hasGhost -> a
    void setPaintGhost(boolean) -> setPaintGhost
    java.awt.Rectangle getTabAreaBound() -> getTabAreaBound
    void paintComponent(java.awt.Graphics) -> paintComponent
    int access$0(utils.swing.DnDTabbedPane,java.awt.Point) -> a
utils.swing.DnDTabbedPane$1 -> utils.swing.DnDTabbedPane$1:
    utils.swing.DnDTabbedPane this$0 -> a
    void dragEnter(java.awt.dnd.DragSourceDragEvent) -> dragEnter
    void dragExit(java.awt.dnd.DragSourceEvent) -> dragExit
    void dragOver(java.awt.dnd.DragSourceDragEvent) -> dragOver
    void dragDropEnd(java.awt.dnd.DragSourceDropEvent) -> dragDropEnd
    void dropActionChanged(java.awt.dnd.DragSourceDragEvent) -> dropActionChanged
utils.swing.DnDTabbedPane$2 -> utils.swing.DnDTabbedPane$2:
    java.awt.datatransfer.DataFlavor FLAVOR -> a
    utils.swing.DnDTabbedPane this$0 -> a
    java.lang.Object getTransferData(java.awt.datatransfer.DataFlavor) -> getTransferData
    java.awt.datatransfer.DataFlavor[] getTransferDataFlavors() -> getTransferDataFlavors
    boolean isDataFlavorSupported(java.awt.datatransfer.DataFlavor) -> isDataFlavorSupported
utils.swing.DnDTabbedPane$3 -> utils.swing.DnDTabbedPane$3:
    utils.swing.DnDTabbedPane this$0 -> a
    java.awt.datatransfer.Transferable val$t -> a
    java.awt.dnd.DragSourceListener val$dsl -> a
    void dragGestureRecognized(java.awt.dnd.DragGestureEvent) -> dragGestureRecognized
utils.swing.DnDTabbedPane$CDropTargetListener -> utils.swing.DnDTabbedPane$CDropTargetListener:
    utils.swing.DnDTabbedPane this$0 -> a
    void dragEnter(java.awt.dnd.DropTargetDragEvent) -> dragEnter
    void dragExit(java.awt.dnd.DropTargetEvent) -> dragExit
    void dropActionChanged(java.awt.dnd.DropTargetDragEvent) -> dropActionChanged
    void dragOver(java.awt.dnd.DropTargetDragEvent) -> dragOver
    void drop(java.awt.dnd.DropTargetDropEvent) -> drop
utils.swing.GhostGlassPane -> utils.swing.GhostGlassPane:
    java.awt.AlphaComposite composite -> a
    java.awt.Point location -> a
    java.awt.image.BufferedImage draggingGhost -> a
    void setImage(java.awt.image.BufferedImage) -> setImage
    void setPoint(java.awt.Point) -> setPoint
    void paintComponent(java.awt.Graphics) -> paintComponent
view.AboutFrame -> view.AboutFrame:
    javax.swing.JEditorPane jep -> a
    javax.swing.JButton jbtnOk -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void hyperlinkUpdate(javax.swing.event.HyperlinkEvent) -> hyperlinkUpdate
view.FileLocate -> view.FileLocate:
    controller.fileaccess.UniverseParser universeParser -> a
    java.util.ArrayList fileLocateListeners -> a
    controller.fileaccess.UniverseParser getUniverseParser() -> getUniverseParser
    void setUniverseParser(controller.fileaccess.UniverseParser) -> setUniverseParser
    boolean hasUniverseParser() -> a
    boolean openUniverseFile(java.awt.Component) -> a
    void closeUniverseFile() -> a
    java.io.File askForSaveRoutesFile(java.awt.Component,java.io.File) -> a
    void addFileLocateListener(view.FileLocateListener) -> a
    void fireUniverseFound() -> b
view.FileLocateListener -> view.FileLocateListener:
    void universeLocated() -> d
    void universeLost() -> e
view.JIntegerField -> view.JIntegerField:
    long maxValue -> a
    long minValue -> b
    int maxLength -> a
    javax.swing.text.Document createDefaultModel() -> createDefaultModel
    void setMinValue(long) -> setMinValue
    long getMinValue() -> getMinValue
    void setMaxValue(long) -> setMaxValue
    long getMaxValue() -> getMaxValue
    void setMaxLength(int) -> setMaxLength
    long getMaxLength() -> getMaxLength
    long getValue() -> getValue
    void setValue(int) -> setValue
view.JIntegerField$IntegerDocument -> view.JIntegerField$IntegerDocument:
    view.JIntegerField this$0 -> a
    void insertString(int,java.lang.String,javax.swing.text.AttributeSet) -> insertString
view.ListPanel -> view.ListPanel:
    javax.swing.JTable list -> a
    view.MyTableRowSorter sorter -> a
    view.MyTableModel rtm -> a
    view.MyTableModel ltm -> b
    void initListTableModel() -> a_
    void initComponents() -> b
    void addComponents() -> c
    void initActionsFileMenu() -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void createLTM(int,int) -> a
view.ListPanelWithRaces -> view.ListPanelWithRaces:
    javax.swing.JTable selectRaces -> b
    java.util.Map races -> a
    void initListTableModel() -> a_
    void initComponents() -> b
    void addComponents() -> c
    void initActionsFileMenu() -> a
    void tableChanged(javax.swing.event.TableModelEvent) -> tableChanged
    boolean checkForStandardTableChanged(javax.swing.event.TableModelEvent) -> a
    void filterTableByRace() -> f
view.MainContainer -> view.MainContainer:
    utils.swing.DnDTabbedPane jtp -> a
    view.MainPanel mp -> a
    view.TradeRoutesPanel trc -> a
    view.ShipListPanel slc -> a
    view.WeaponListPanel wlc -> a
    view.NearestXListPanel nxlc -> a
    view.PlayerListPanel plp -> a
    void showShipList() -> a
    void showWeaponList() -> b
    void showNearestX() -> c
    void showPlayer() -> d
    void showRouteGenerator() -> e
    void showMainMenu() -> f
    void switchToTab(view.TheLazyTraderPanel) -> a
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
view.MainPanel -> view.MainPanel:
    javax.swing.JButton[] jbActionButtons -> a
    void initActionsFileMenu() -> a
    void initComponents() -> b
    void addComponents() -> c
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
view.MyTableModel -> view.MyTableModel:
    java.lang.String[] columnNames -> a
    java.lang.Object[][] data -> a
    boolean editable -> a
    java.text.DecimalFormat dfInt -> a
    java.text.DecimalFormat dfReal -> b
    int getColumnCount() -> getColumnCount
    int getRowCount() -> getRowCount
    java.lang.String getColumnName(int) -> getColumnName
    java.lang.Object getValueAt(int,int) -> getValueAt
    java.lang.Object getRealValueAt(int,int) -> a
    void setValueAt(java.lang.Object,int,int) -> setValueAt
    java.lang.Class getColumnClass(int) -> getColumnClass
    java.lang.Class getRealColumnClass(int) -> getRealColumnClass
    boolean isCellEditable(int,int) -> isCellEditable
    void setEditable(boolean) -> setEditable
    boolean getEditable() -> getEditable
view.MyTableRowSorter -> view.MyTableRowSorter:
    java.util.Comparator COMPARABLE_COMPARATOR -> a
    view.MyTableModel tableModel -> a
    javax.swing.table.TableStringConverter stringConverter -> a
    void setModel(view.MyTableModel) -> setModel
    void setStringConverter(javax.swing.table.TableStringConverter) -> setStringConverter
    javax.swing.table.TableStringConverter getStringConverter() -> getStringConverter
    java.util.Comparator getComparator(int) -> getComparator
    java.lang.Class getColumnClass(int) -> getColumnClass
    boolean useToString(int) -> useToString
view.MyTableRowSorter$ComparableComparator -> view.MyTableRowSorter$ComparableComparator:
    int compare(java.lang.Object,java.lang.Object) -> compare
view.MyTableRowSorter$TableRowSorterModelWrapper -> view.MyTableRowSorter$TableRowSorterModelWrapper:
    view.MyTableRowSorter this$0 -> a
    view.MyTableModel getModel() -> getModel
    int getColumnCount() -> getColumnCount
    int getRowCount() -> getRowCount
    java.lang.Object getValueAt(int,int) -> getValueAt
    java.lang.String getStringValueAt(int,int) -> getStringValueAt
    java.lang.Integer getIdentifier(int) -> getIdentifier
    java.lang.Object getIdentifier(int) -> getIdentifier
    java.lang.Object getModel() -> getModel
view.NearestXListPanel -> view.NearestXListPanel:
    javax.swing.JTree itemsTree -> a
    view.JIntegerField sectorBox -> a
    view.swing.tree.FilterableTreeNode root -> a
    view.swing.tree.FilteredTreeModel treeModel -> a
    javax.swing.JTextArea routeDisplay -> a
    model.Distance[] storedDistances -> a
    void initComponents() -> b
    void addComponents() -> c
    void initListTableModel() -> a_
    void valueChanged(javax.swing.event.TreeSelectionEvent) -> valueChanged
    void createLTM(int) -> a
    void filterTableByRace() -> f
    void tableChanged(javax.swing.event.TableModelEvent) -> tableChanged
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
view.PlayerListPanel -> view.PlayerListPanel:
    void initListTableModel() -> a_
    void tableChanged(javax.swing.event.TableModelEvent) -> tableChanged
view.ShipListPanel -> view.ShipListPanel:
    void initListTableModel() -> a_
view.TheLazyTraderPanel -> view.TheLazyTraderPanel:
    javax.swing.JMenuBar jmb -> a
    javax.swing.JMenu[] fileMenu -> a
    javax.swing.JMenuItem[] jmiFileOptions -> a
    javax.swing.JMenuItem[] jmiActionOptions -> b
    javax.swing.JMenuItem[] jmiViewOptions -> c
    javax.swing.JMenuItem[] jmiHelpOptions -> d
    view.AboutFrame aboutFrame -> a
    java.lang.String title -> a
    view.MainContainer parent -> a
    void initComponents() -> b
    void addComponents() -> c
    javax.swing.JPanel createLabelJComponentPair(java.lang.String,javax.swing.JComponent) -> a
    void initActionsFileMenu() -> a
    void createStandardMenuBar() -> f
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    boolean standardActionChecks(java.awt.event.ActionEvent) -> a
    boolean checkQuit() -> a
    boolean checkSectorsFileOpened() -> b
    void universeLocated() -> d
    void universeLost() -> e
    javax.swing.JMenuBar getMenuBar() -> getMenuBar
    java.lang.String getTitle() -> getTitle
view.TradeRoutesPanel -> view.TradeRoutesPanel:
    javax.swing.JTextArea jta -> a
    javax.swing.JTable selectGoods -> a
    javax.swing.JTable selectRaces -> b
    java.util.Map races -> a
    java.util.Map goods -> b
    view.JIntegerField selectStart -> a
    view.JIntegerField selectEnd -> b
    view.JIntegerField selectMaxDistance -> c
    view.JIntegerField selectNumberPorts -> d
    view.JIntegerField selectNumberOfRoutes -> e
    javax.swing.JComboBox selectGalaxy -> a
    java.io.File saveRoutesFile -> a
    controller.RouteHandler routeHandler -> a
    controller.RouteSwingWorker rsw -> a
    javax.swing.JProgressBar progressBar -> a
    void initComponents() -> b
    void addComponents() -> c
    void initActionsFileMenu() -> a
    boolean askForSaveRoutesFile() -> c
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void doRouteGeneration() -> f
    void tableChanged(javax.swing.event.TableModelEvent) -> tableChanged
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void universeLocated() -> d
    void universeLost() -> e
view.WeaponListPanel -> view.WeaponListPanel:
    void initListTableModel() -> a_
view.swing.tree.FilterableTreeNode -> view.swing.tree.FilterableTreeNode:
    java.util.Map races -> a
    void setRaceFilter(java.util.Map) -> setRaceFilter
    boolean filterAllows() -> a
view.swing.tree.FilteredTreeModel -> view.swing.tree.FilteredTreeModel:
    java.lang.Object getChild(java.lang.Object,int) -> getChild
    int getChildCount(java.lang.Object) -> getChildCount
