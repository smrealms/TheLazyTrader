ExecuteGUI -> ExecuteGUI:
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
controller.RouteHandler -> a:
    java.text.DecimalFormat df -> a
    int numberOfRoutes -> a
    model.Universe universe -> a
    int startSector -> c
    int endSector -> d
    int maxDistance -> e
    int maxNumberOfPorts -> f
    int routesForPort -> g
    model.Route$DisplayType displayType -> a
    java.util.Map races -> a
    java.util.Map goods -> b
    int typeOfRoute -> b
    boolean doSave -> a
    java.io.File saveFile -> a
    boolean distancesChangedSinceLastRun -> b
    boolean routesChangedSinceLastRun -> c
    gnu.trove.map.TIntObjectMap distances -> a
    java.util.NavigableMap[] allRoutes -> a
    void <init>(int,int,int,int,int,model.Route$DisplayType,java.util.Map,java.util.Map) -> <init>
    java.lang.String doInBackground(controller.RouteSwingWorker) -> a
    java.lang.String getTopRoutesString() -> a
    void setEndSector(int) -> a
    void setGoods(java.util.Map) -> a
    void setMaxDistance(int) -> b
    void setMaxNumberOfPorts(int) -> c
    void setRaces(java.util.Map) -> b
    void setStartSector(int) -> d
    void setUniverse(model.Universe) -> a
    void setRoutesForPort(int) -> e
    void universeLocated() -> a_
    void universeLost() -> b
    void <clinit>() -> <clinit>
controller.RouteSwingWorker -> b:
    javax.swing.JTextArea routeDisplay -> a
    controller.RouteHandler routeHandler -> a
    javax.swing.JProgressBar progressBar -> a
    java.util.Date startDate -> a
    void <init>(javax.swing.JTextArea,controller.RouteHandler,javax.swing.JProgressBar) -> <init>
    void done() -> done
    void publishProgress(java.lang.String) -> a
    void process(java.util.List) -> process
    java.lang.Object doInBackground() -> doInBackground
controller.fileaccess.DatabaseIniParser -> c:
    org.ini4j.Ini mapFile -> a
    void <init>(org.ini4j.Ini) -> <init>
    void <init>(java.lang.String) -> <init>
    void run() -> run
    void parseRaces() -> a
    void parseGoods() -> b
    void parseShipEquipment() -> c
    void parseShipAbilities() -> d
    void parseShips() -> e
    void parseWeapons() -> f
    void parseLocations() -> g
controller.fileaccess.DatabaseParser -> d:
    void <init>() -> <init>
controller.fileaccess.SMRIniParser -> e:
    org.ini4j.Ini mapFile -> a
    model.Universe storedUni -> a
    void <init>(java.lang.String) -> <init>
    model.Universe getUniverse() -> a
    java.util.Map getGalaxies() -> a
    void run() -> run
    void parseGalaxies() -> a
    void parseSectors() -> b
controller.fileaccess.UniverseParser -> f:
    void <init>() -> <init>
    model.Universe getUniverse() -> a
    java.util.Map getGalaxies() -> a
controller.pathfinding.DiCalculator -> g:
    int targetSector -> a
    model.Sector[] generateDistanceIndexesForGood$43b5cee8(model.Sector[]) -> a
    int findNearestGoodWithStatus(model.Sector[],int,int,int) -> a
    gnu.trove.map.TIntObjectMap findDistanceToX$3f36fa02(java.lang.Object,model.Sector[],int,long,long,long) -> a
    void <init>(int) -> <init>
    java.lang.Object findService(java.lang.Class) -> a
    java.lang.Class findServiceClass(java.lang.Class) -> a
    java.lang.String findServiceClassName(java.lang.String) -> a
    java.lang.String loadLine(java.lang.String) -> b
controller.pathfinding.RouteGenerator -> h:
    java.util.concurrent.ExecutorService executor -> a
    java.util.NavigableMap expRoutes -> a
    java.util.NavigableMap moneyRoutes -> b
    int trimToBestXRoutes -> b
    controller.RouteSwingWorker publishProgressTo -> a
    double[] dontAddWorseThan -> a
    int totalTasks -> a
    int tasksCompleted -> c
    java.util.NavigableMap[] generateMultiPortRoutes(int,model.Sector[],java.util.Map,java.util.Map,gnu.trove.map.TIntObjectMap,int,int) -> a
    void publishProgress() -> a
    void startRoutesToContinue(int,int,model.OneWayRoute[],gnu.trove.map.TIntObjectMap) -> a
    void getContinueRoutes(int,int,model.Route,model.OneWayRoute[],gnu.trove.map.TIntObjectMap,boolean) -> a
    gnu.trove.map.TIntObjectMap findOneWayRoutes(model.Sector[],gnu.trove.map.TIntObjectMap,int,java.util.Map,java.util.Map) -> a
    java.util.NavigableMap[] generateOneWayRoutes(model.Sector[],gnu.trove.map.TIntObjectMap,java.util.Map,java.util.Map,int) -> a
    void addExpRoute(model.Route) -> a
    void addMoneyRoute(model.Route) -> b
    void setPublishProgressTo(controller.RouteSwingWorker) -> a
    void trimRoutes() -> b
    void <clinit>() -> <clinit>
controller.pathfinding.RouteGenerator$1 -> i:
    java.util.Collection val$runs -> a
    int val$maxNumPorts -> a
    gnu.trove.map.TIntObjectMap val$routeLists -> a
    void <init>(java.util.Collection,int,gnu.trove.map.TIntObjectMap) -> <init>
    boolean execute(int,java.lang.Object) -> a
controller.pathfinding.RouteGenerator$1$1 -> j:
    int val$sectorId -> a
    model.OneWayRoute[] val$owrs -> a
    controller.pathfinding.RouteGenerator$1 this$0 -> a
    void <init>(controller.pathfinding.RouteGenerator$1,int,model.OneWayRoute[]) -> <init>
    java.lang.Object call() -> call
gnu.trove.TIntCollection -> k:
    int size() -> a_
    gnu.trove.TIntCollection iterator$627ba2d4() -> a
    int next() -> b
    boolean execute(int,int) -> a
    void universeLocated() -> a_
    void universeLost() -> b
    void handleComment(java.lang.String) -> a
    void handleOption(java.lang.String,java.lang.String) -> a
    void endIni() -> c
    void endSection() -> d
    void startIni() -> e
    void startSection(java.lang.String) -> b
gnu.trove.impl.Constants -> l:
    boolean VERBOSE -> a
    byte DEFAULT_BYTE_NO_ENTRY_VALUE -> a
    short DEFAULT_SHORT_NO_ENTRY_VALUE -> a
    int DEFAULT_INT_NO_ENTRY_VALUE -> a
    long DEFAULT_LONG_NO_ENTRY_VALUE -> a
    float DEFAULT_FLOAT_NO_ENTRY_VALUE -> a
    double DEFAULT_DOUBLE_NO_ENTRY_VALUE -> a
    void <clinit>() -> <clinit>
gnu.trove.impl.HashFunctions -> m:
    void <init>() -> <init>
    int hash(int) -> a
    int fastCeil$133ade() -> a
    void <clinit>() -> <clinit>
gnu.trove.impl.PrimeFinder -> n:
    int[] primeCapacities -> a
    int nextPrime(int) -> a
    void <clinit>() -> <clinit>
gnu.trove.impl.hash.THash -> o:
    int _size -> a
    int _free -> b
    float _loadFactor -> a
    int _maxSize -> c
    float _autoCompactionFactor -> b
    void <init>() -> <init>
    void <init>(byte) -> <init>
    int size() -> a
    int capacity() -> b
    int setUp(int) -> a
    void rehash(int) -> a
    void computeMaxSize(int) -> b
    void postInsertHook(boolean) -> a
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.THashPrimitiveIterator -> p:
    gnu.trove.impl.hash.TPrimitiveHash _hash -> a
    int _expectedSize -> b
    int _index -> a
    void <init>(gnu.trove.impl.hash.TPrimitiveHash) -> <init>
    int nextIndex() -> c
    boolean hasNext() -> a
    void moveToNextIndex() -> f
gnu.trove.impl.hash.TIntHash -> q:
    int[] _set -> a
    int no_entry_value -> b
    boolean consumeFreeSlot -> a
    void <init>() -> <init>
    int setUp(int) -> a
    boolean contains(int) -> a_
    int index(int) -> b
    int indexRehashed$3b4e189f(int,int,int) -> a
    int insertKey(int) -> c
    void insertKeyAt(int,int) -> a
gnu.trove.impl.hash.TIntIntHash -> r:
    int[] _set -> a
    int no_entry_key -> c
    int no_entry_value -> b
    boolean consumeFreeSlot -> a
    void <init>() -> <init>
    int getNoEntryValue() -> c
    int setUp(int) -> a
    int insertKey(int) -> a_
    void insertKeyAt(int,int) -> a
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TPrimitiveHash -> s:
    byte[] _states -> a
    void <init>() -> <init>
    int capacity() -> b
    int setUp(int) -> a
gnu.trove.iterator.TAdvancingIterator -> t:
    void advance() -> a
gnu.trove.iterator.TIntObjectIterator -> u:
    int key() -> a
    java.lang.Object value() -> a
gnu.trove.iterator.TIterator -> v:
    boolean hasNext() -> a
gnu.trove.list.array.TIntArrayList -> w:
    int[] _data -> a
    int _pos -> a
    int no_entry_value -> b
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,byte) -> <init>
    void <init>(gnu.trove.TIntCollection) -> <init>
    void ensureCapacity(int) -> a
    int size() -> a_
    boolean add(int) -> a
    int get(int) -> a
    gnu.trove.TIntCollection iterator$627ba2d4() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.list.array.TIntArrayList$TIntArrayIterator -> x:
    int cursor -> a
    gnu.trove.list.array.TIntArrayList this$0 -> a
    void <init>(gnu.trove.list.array.TIntArrayList) -> <init>
    boolean hasNext() -> a
    int next() -> b
gnu.trove.map.TIntIntMap -> y:
    int getNoEntryValue() -> c
    int put(int,int) -> a
    int get(int) -> b
    int size() -> a
gnu.trove.map.TIntObjectMap -> z:
    int size() -> a
    boolean containsKey(int) -> a
    java.lang.Object get(int) -> a
    java.lang.Object put(int,java.lang.Object) -> a
    java.lang.Object[] values() -> a
    java.lang.Object[] values(java.lang.Object[]) -> a
    gnu.trove.iterator.TIntObjectIterator iterator() -> a
    boolean forEachEntry(gnu.trove.procedure.TIntObjectProcedure) -> a
gnu.trove.map.hash.TIntIntHashMap -> A:
    int[] _values -> b
    void <init>() -> <init>
    int setUp(int) -> a
    void rehash(int) -> a
    int put(int,int) -> a
    int get(int) -> b
    boolean forEachEntry$40a85583$38967d0a(gnu.trove.TIntCollection) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.map.hash.TIntIntHashMap$1 -> B:
    boolean first -> a
    java.lang.StringBuilder val$buf -> a
    void <init>(java.lang.StringBuilder) -> <init>
    boolean execute(int,int) -> a
gnu.trove.map.hash.TIntObjectHashMap -> C:
    java.lang.Object[] _values -> a
    int no_entry_key -> b
    void <init>() -> <init>
    int setUp(int) -> a
    void rehash(int) -> a
    boolean containsKey(int) -> a
    java.lang.Object get(int) -> a
    java.lang.Object put(int,java.lang.Object) -> a
    java.lang.Object[] values() -> a
    java.lang.Object[] values(java.lang.Object[]) -> a
    gnu.trove.iterator.TIntObjectIterator iterator() -> a
    boolean forEachEntry(gnu.trove.procedure.TIntObjectProcedure) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
gnu.trove.map.hash.TIntObjectHashMap$1 -> D:
    gnu.trove.map.hash.TIntObjectHashMap this$0 -> a
    void <init>(gnu.trove.map.hash.TIntObjectHashMap) -> <init>
    boolean execute(int,java.lang.Object) -> a
gnu.trove.map.hash.TIntObjectHashMap$2 -> E:
    boolean first -> a
    java.lang.StringBuilder val$buf -> a
    void <init>(java.lang.StringBuilder) -> <init>
    boolean execute(int,java.lang.Object) -> a
gnu.trove.map.hash.TIntObjectHashMap$TIntObjectHashIterator -> F:
    gnu.trove.map.hash.TIntObjectHashMap _map -> a
    void <init>(gnu.trove.map.hash.TIntObjectHashMap) -> <init>
    void advance() -> a
    int key() -> a
    java.lang.Object value() -> a
gnu.trove.procedure.TIntObjectProcedure -> G:
    boolean execute(int,java.lang.Object) -> a
loci.visbio.util.BrowserLauncher -> H:
    int jvm -> a
    java.lang.Object theBrowser -> a
    boolean loadedWithoutErrors -> a
    java.lang.Class mrjFileUtilsClass -> a
    java.lang.Class mrjOSTypeClass -> b
    java.lang.Class aeDescClass -> c
    java.lang.reflect.Constructor aeTargetConstructor -> a
    java.lang.reflect.Constructor appleEventConstructor -> b
    java.lang.reflect.Constructor aeDescConstructor -> c
    java.lang.reflect.Method findFolder -> a
    java.lang.reflect.Method getFileCreator -> b
    java.lang.reflect.Method getFileType -> c
    java.lang.reflect.Method openURL -> d
    java.lang.reflect.Method makeOSType -> e
    java.lang.reflect.Method putParameter -> f
    java.lang.reflect.Method sendNoReply -> g
    java.lang.Object kSystemFolderType -> b
    java.lang.Integer keyDirectObject -> a
    java.lang.Integer kAutoGenerateReturnID -> b
    java.lang.Integer kAnyTransactionID -> c
    java.lang.String errorMessage -> a
    void <init>() -> <init>
    boolean loadClasses() -> a
    java.lang.Object locateBrowser() -> a
    void openURL(java.lang.String) -> a
    int ICStart(int[],int) -> a
    int ICStop(int[]) -> a
    int ICLaunchURL(int,byte[],byte[],int,int[],int[]) -> a
    void <clinit>() -> <clinit>
model.Distance -> I:
    int distance -> a
    int numWarps -> b
    gnu.trove.list.array.TIntArrayList path -> a
    void <init>(int) -> <init>
    void <init>(int,int,gnu.trove.list.array.TIntArrayList) -> <init>
    void incrementDistance() -> a
    model.Distance clone() -> a
    double getTurns() -> a
    int getEndSectorId() -> a
    void addToPath(int) -> a
    void addWarpToPath(int) -> b
    java.lang.Object clone() -> clone
    int compareTo(java.lang.Object) -> compareTo
model.Galaxy -> J:
    int galaxyId -> a
    int width -> b
    int height -> c
    int startSectorId -> d
    int endSectorId -> e
    java.lang.String name -> a
    void <init>(int) -> <init>
    java.lang.String toString() -> toString
model.Good -> K:
    java.util.NavigableMap GOOD_NAMES -> a
    java.util.NavigableMap GOOD_VALUES -> b
    int state -> a
    int goodId -> b
    int distanceIndex -> c
    void <init>(int,int) -> <init>
    java.lang.String getName(int) -> a
    java.util.Map getNames() -> a
    int getValue(int) -> a
    void addGood(int,java.lang.String,int) -> a
    int getId(java.lang.String) -> a
    java.lang.String toString() -> toString
    void clearGoods() -> a
    void <clinit>() -> <clinit>
model.HasRace -> L:
    int getRace() -> a
model.Location -> M:
    java.util.NavigableMap locationSingletons -> a
    java.util.NavigableMap locationSingletonsByType -> b
    java.lang.String locationName -> b
    java.lang.String type -> a
    java.util.ArrayList ships -> a
    java.util.ArrayList weapons -> b
    java.util.ArrayList shipEquipment -> c
    model.Location getLocation(java.lang.String) -> a
    void putLocation(model.Location) -> a
    java.util.NavigableMap getLocationByType(java.lang.String) -> a
    java.util.NavigableMap getLocationsByType() -> a
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
    void clearLocations() -> a
    void <clinit>() -> <clinit>
model.MultiplePortRoute -> N:
    model.Route forwardRoute -> a
    model.Route returnRoute -> b
    void <init>(model.Route,model.Route) -> <init>
    model.Route getForwardRoute() -> a
    model.Route getReturnRoute() -> b
model.OneWayRoute -> O:
    int sellSectorId -> a
    int buySectorId -> b
    int sellDi -> f
    int buyDi -> g
    model.Distance distance -> a
    int goodId -> c
    int sellPortRace -> d
    int buyPortRace -> e
    void <init>(int,int,int,int,int,int,model.Distance,int) -> <init>
    double getMoneyMultiplierSum() -> a
    double getExpMultiplierSum() -> b
    double getTurnsForRoute() -> c
    boolean containsPort(int) -> a
    java.lang.String getRouteString(model.Route$DisplayType) -> a
    model.Route getReturnRoute() -> b
    model.Route getForwardRoute() -> a
    int compareTo(java.lang.Object) -> compareTo
model.OneWayRoute$1 -> P:
    int[] $SwitchMap$model$Route$DisplayType -> a
    void <clinit>() -> <clinit>
model.Port -> Q:
    int portLevel -> a
    int portRace -> b
    java.util.Map goods -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    void setGoodDistance(int,int) -> a
    int getGoodStatus(int) -> a
    int getGoodDistance(int) -> b
model.Race -> R:
    java.util.NavigableMap RACE_NAMES -> a
    java.lang.String name -> a
    int id -> a
    java.lang.String getName(int) -> a
    java.lang.String getBBCode(int) -> b
    int getId(java.lang.String) -> a
    void addRace(model.Race) -> a
    java.util.NavigableMap getRaces() -> a
    int getNumberOfRaces() -> a
    void <init>(java.lang.String,int) -> <init>
    java.lang.String toString() -> toString
    void clearRaces() -> a
    void <clinit>() -> <clinit>
model.Route -> S:
    void <init>() -> <init>
    double getOverallExpMultiplier() -> d
    double getOverallMoneyMultiplier() -> e
    double getTurnsForRoute() -> c
    double getExpMultiplierSum() -> b
    double getMoneyMultiplierSum() -> a
    boolean containsPort(int) -> a
    model.Route getForwardRoute() -> a
    model.Route getReturnRoute() -> b
    java.lang.String getRouteString(model.Route$DisplayType) -> a
model.Route$DisplayType -> T:
    model.Route$DisplayType TheLazyTrader -> a
    model.Route$DisplayType TheLazyTradeBBCode -> b
    model.Route$DisplayType[] $VALUES -> a
    model.Route$DisplayType[] values() -> a
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
model.Sector -> U:
    int sectorId -> a
    java.util.ArrayList connections -> a
    java.util.ArrayList warps -> b
    model.Port port -> a
    java.util.ArrayList locations -> c
    java.lang.String getBBCode(int) -> a
    void <init>(int) -> <init>
    void addConnection$505cff1c(int) -> a
    boolean hasPort() -> a
    boolean hasLocation() -> b
    boolean equals(java.lang.Object) -> equals
    boolean hasX(java.lang.Object) -> a
model.Universe -> V:
    java.util.Map galaxies -> a
    model.Sector[] sectors -> a
    void <init>() -> <init>
    model.Galaxy getGalaxy(int) -> a
model.Weapon -> W:
    java.util.NavigableMap WEAPONS -> a
    java.util.NavigableMap WEAPONS_BY_POWER -> b
    java.lang.String name -> a
    int race -> a
    int cost -> b
    int shieldDamage -> c
    int armourDamage -> d
    int accuracy -> e
    int powerLevel -> f
    java.util.ArrayList restrictions -> a
    void <init>(java.lang.String) -> <init>
    void addWeapon(model.Weapon) -> a
    model.Weapon getWeapon(java.lang.String) -> a
    java.util.NavigableMap getWeapons() -> a
    java.util.NavigableMap getWeaponsByPower() -> b
    int getRace() -> a
    java.lang.String toString() -> toString
    void clearWeapons() -> a
    void <clinit>() -> <clinit>
model.preferences.GeneralPreferences -> X:
    boolean askForMemory -> a
    int memoryToAllocate -> a
    boolean askForMemory() -> a
    void setAskForMemory(boolean) -> a
    int getMemoryToAllocate() -> a
    void setMemoryToAllocate(int) -> a
    void <clinit>() -> <clinit>
model.preferences.ParsingPreferences -> Y:
    java.lang.String SMRFileParserPath -> a
    void <init>() -> <init>
    java.lang.String getSMRFileParserPath() -> a
    void setSMRFileParserPath(java.lang.String) -> a
    void <clinit>() -> <clinit>
model.preferences.PlayerPreferences -> Z:
    gnu.trove.map.TIntIntMap relations -> a
    void <init>() -> <init>
    void setRelation(int,int) -> a
    int getRelationsForRace(int) -> a
    void <clinit>() -> <clinit>
model.preferences.RoutePreferences -> aa:
    boolean useRelationsFactor -> a
    void <init>() -> <init>
    boolean useRelationsFactor() -> a
    void <clinit>() -> <clinit>
model.ship.Restriction -> ab:
    java.lang.String name -> a
    void <init>(java.lang.String) -> <init>
    int compareTo(java.lang.Object) -> compareTo
    java.lang.String toString() -> toString
model.ship.Ship -> ac:
    java.util.NavigableMap SHIPS -> a
    java.util.NavigableMap SHIPS_BY_RACE -> b
    java.lang.String name -> a
    java.lang.String shipClass -> b
    int race -> a
    int cost -> b
    int turnRate -> c
    int power -> d
    int hardpoints -> e
    java.util.Map equipment -> a
    java.util.ArrayList abilities -> a
    model.ship.Restriction restriction -> a
    void addShip(model.ship.Ship) -> a
    model.ship.Ship getShip(java.lang.String) -> a
    java.util.NavigableMap getShips() -> a
    java.util.NavigableMap getShipsByRace() -> b
    void <init>(java.lang.String) -> <init>
    int getRace() -> a
    java.lang.String toString() -> toString
    void clearShips() -> a
    void <clinit>() -> <clinit>
model.ship.ShipAbility -> ad:
    java.lang.String name -> a
    java.util.NavigableMap SHIP_ABILITIES -> a
    void addShipAbility(model.ship.ShipAbility) -> a
    model.ship.ShipAbility getShipAbility(java.lang.String) -> a
    void <init>(java.lang.String) -> <init>
    void <clinit>() -> <clinit>
model.ship.ShipEquipment -> ae:
    java.lang.String name -> a
    java.util.NavigableMap SHIP_EQUIPMENTS -> a
    void addShipEquipment(model.ship.ShipEquipment) -> a
    model.ship.ShipEquipment getShipEquipment(java.lang.String) -> a
    java.util.NavigableMap getShipEquipments() -> a
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.ini4j.BasicMultiMap -> af:
    java.util.Map _impl -> a
    void <init>() -> <init>
    void <init>(java.util.Map) -> <init>
    java.util.List getAll(java.lang.Object) -> a
    boolean isEmpty() -> isEmpty
    void add(java.lang.Object,java.lang.Object) -> a
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Set entrySet() -> entrySet
    java.lang.Object get(java.lang.Object) -> get
    java.util.Set keySet() -> keySet
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    int size() -> size
    java.lang.String toString() -> toString
    java.util.Collection values() -> values
    java.util.List getList(java.lang.Object,boolean) -> a
org.ini4j.BasicMultiMap$ShadowEntry -> ag:
    java.lang.Object _key -> a
    org.ini4j.BasicMultiMap this$0 -> a
    void <init>(org.ini4j.BasicMultiMap,java.lang.Object) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
org.ini4j.BasicOptionMap -> ah:
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void <clinit>() -> <clinit>
org.ini4j.BasicProfile -> ai:
    void <init>() -> <init>
    void <init>(byte) -> <init>
    org.ini4j.Profile$Section add(java.lang.String) -> a
    boolean isTreeMode() -> a
    char getPathSeparator() -> a
    void <clinit>() -> <clinit>
org.ini4j.BasicProfileSection -> aj:
    org.ini4j.BasicProfile _profile -> a
    void <init>(org.ini4j.BasicProfile,java.lang.String) -> <init>
org.ini4j.CommentedMap -> ak:
    java.lang.String putComment(java.lang.Object,java.lang.String) -> a
org.ini4j.CommonMultiMap -> al:
    java.util.SortedMap _meta -> a
    void <init>() -> <init>
    void clear() -> clear
    void putAll(java.util.Map) -> putAll
    java.lang.String putComment(java.lang.Object,java.lang.String) -> a
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.String makeKey(java.lang.String,java.lang.Object) -> a
    java.util.Map meta() -> a
org.ini4j.Config -> am:
    java.lang.String DEFAULT_LINE_SEPARATOR -> c
    java.nio.charset.Charset DEFAULT_FILE_ENCODING -> b
    org.ini4j.Config GLOBAL -> a
    boolean _comment -> a
    boolean _emptyOption -> b
    boolean _escape -> c
    boolean _escapeNewline -> d
    java.nio.charset.Charset _fileEncoding -> a
    boolean _globalSection -> e
    java.lang.String _globalSectionName -> a
    boolean _headerComment -> f
    boolean _include -> g
    java.lang.String _lineSeparator -> b
    boolean _lowerCaseOption -> h
    boolean _lowerCaseSection -> i
    boolean _multiOption -> j
    boolean _multiSection -> k
    char _pathSeparator -> a
    boolean _tree -> l
    boolean _unnamedSection -> m
    void <init>() -> <init>
    org.ini4j.Config getGlobal() -> a
    java.lang.String getSystemProperty(java.lang.String,java.lang.String) -> a
    org.ini4j.Config clone() -> b
    boolean getBoolean(java.lang.String,boolean) -> a
    java.lang.String getString(java.lang.String,java.lang.String) -> b
    java.lang.Object clone() -> clone
    void <clinit>() -> <clinit>
org.ini4j.Ini -> an:
    org.ini4j.Config _config -> a
    void <init>() -> <init>
    void <init>(java.io.Reader) -> <init>
    boolean isTreeMode() -> a
    char getPathSeparator() -> a
org.ini4j.InvalidFileFormatException -> ao:
    void <init>(java.lang.String) -> <init>
org.ini4j.MultiMap -> ap:
    java.util.List getAll(java.lang.Object) -> a
    void add(java.lang.Object,java.lang.Object) -> a
org.ini4j.OptionMap -> aq:
org.ini4j.Profile -> ar:
    org.ini4j.Profile$Section add(java.lang.String) -> a
org.ini4j.Profile$Section -> as:
org.ini4j.spi.AbstractParser -> at:
    java.lang.String _comments -> a
    org.ini4j.Config _config -> a
    java.lang.String _operators -> b
    void <init>(java.lang.String,java.lang.String) -> <init>
    void parseError(java.lang.String,int) -> a
    void parseOptionLine$3851e7f9(java.lang.String,gnu.trove.TIntCollection,int) -> a
    java.lang.String unescapeFilter(java.lang.String) -> a
org.ini4j.spi.AbstractProfileBuilder -> au:
    org.ini4j.Profile$Section _currentSection -> a
    boolean _header -> a
    java.lang.String _lastComment -> a
    void <init>() -> <init>
    void endIni() -> c
    void endSection() -> d
    void handleComment(java.lang.String) -> a
    void handleOption(java.lang.String,java.lang.String) -> a
    void startIni() -> e
    void startSection(java.lang.String) -> b
    org.ini4j.Config getConfig() -> a
    org.ini4j.Profile getProfile() -> a
    void setHeaderComment() -> f
    void putComment(org.ini4j.CommentedMap,java.lang.String) -> a
org.ini4j.spi.EscapeTool -> av:
    org.ini4j.spi.EscapeTool INSTANCE -> a
    void <init>() -> <init>
    org.ini4j.spi.EscapeTool getInstance() -> a
    java.lang.String unescape(java.lang.String) -> a
    int unescapeBinary(java.lang.StringBuilder,char,java.lang.String,int) -> a
    void <clinit>() -> <clinit>
org.ini4j.spi.IniBuilder -> aw:
    org.ini4j.Ini _ini -> a
    void <init>() -> <init>
    org.ini4j.spi.IniBuilder newInstance(org.ini4j.Ini) -> a
    org.ini4j.Config getConfig() -> a
    org.ini4j.Profile getProfile() -> a
    void startSection(java.lang.String) -> b
    void startIni() -> e
    void handleOption(java.lang.String,java.lang.String) -> a
    void handleComment(java.lang.String) -> a
    void endSection() -> d
    void endIni() -> c
org.ini4j.spi.IniParser -> ax:
    void <init>() -> <init>
    org.ini4j.spi.IniParser newInstance(org.ini4j.Config) -> a
    void parse$4f4caaca$1946b739(org.ini4j.spi.IniSource,gnu.trove.TIntCollection) -> a
org.ini4j.spi.IniSource -> ay:
    java.net.URL _base -> a
    org.ini4j.spi.IniSource _chain -> a
    java.lang.String _commentChars -> a
    org.ini4j.Config _config -> a
    gnu.trove.TIntCollection _handler$46510aaf -> a
    java.io.LineNumberReader _reader -> a
    void <init>(java.io.Reader,gnu.trove.TIntCollection,java.lang.String,org.ini4j.Config) -> <init>
    void <init>(java.net.URL,gnu.trove.TIntCollection,java.lang.String,org.ini4j.Config) -> <init>
    int getLineNumber() -> a
    java.lang.String readLine() -> a
    int countEndingEscapes(java.lang.String) -> a
    void handleComment(java.lang.StringBuilder) -> a
    java.lang.String handleInclude(java.lang.String) -> a
    java.lang.String readLineLocal() -> b
    java.lang.String readLineSkipComments() -> c
org.ini4j.spi.UnicodeInputStreamReader -> az:
    java.nio.charset.Charset _defaultEncoding -> a
    java.io.InputStreamReader _reader -> a
    java.io.PushbackInputStream _stream -> a
    void <init>(java.io.InputStream,java.nio.charset.Charset) -> <init>
    void close() -> close
    int read(char[],int,int) -> read
    void init() -> a
org.ini4j.spi.UnicodeInputStreamReader$Bom -> aA:
    org.ini4j.spi.UnicodeInputStreamReader$Bom UTF32BE -> a
    org.ini4j.spi.UnicodeInputStreamReader$Bom UTF32LE -> b
    org.ini4j.spi.UnicodeInputStreamReader$Bom UTF16BE -> c
    org.ini4j.spi.UnicodeInputStreamReader$Bom UTF16LE -> d
    org.ini4j.spi.UnicodeInputStreamReader$Bom UTF8 -> e
    byte[] _bytes -> a
    java.nio.charset.Charset _charset -> a
    org.ini4j.spi.UnicodeInputStreamReader$Bom[] $VALUES -> a
    void <init>(java.lang.String,int,java.lang.String,byte[]) -> <init>
    org.ini4j.spi.UnicodeInputStreamReader$Bom access$000(byte[]) -> a
    java.nio.charset.Charset access$100(org.ini4j.spi.UnicodeInputStreamReader$Bom) -> a
    byte[] access$200(org.ini4j.spi.UnicodeInputStreamReader$Bom) -> a
    void <clinit>() -> <clinit>
settings.Settings -> aB:
    int NUMBER_OF_PROCESSORS -> a
    int TURNS_WARP_SECTOR_EQUIVALENCE -> b
    void <clinit>() -> <clinit>
utils.gui.JIntegerField -> aC:
    long maxValue -> a
    int maxLength -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    javax.swing.text.Document createDefaultModel() -> createDefaultModel
    boolean hasValue() -> a
utils.gui.JIntegerField$IntegerDocument -> aD:
    utils.gui.JIntegerField this$0 -> a
    void <init>(utils.gui.JIntegerField) -> <init>
    void insertString(int,java.lang.String,javax.swing.text.AttributeSet) -> insertString
utils.swing.CloseTabListener -> aE:
    javax.swing.JTabbedPane tabbedPane -> a
    javax.swing.JPopupMenu popup -> a
    int tabIndex -> a
    javax.swing.JMenuItem menuItem -> a
    void <init>(javax.swing.JTabbedPane) -> <init>
    int checkTabIndex(java.awt.Point) -> a
    void showPopup(java.awt.event.MouseEvent) -> a
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
utils.swing.DnDTabbedPane -> aF:
    utils.swing.GhostGlassPane glassPane -> a
    java.awt.geom.Rectangle2D lineRect -> a
    java.awt.Color lineColor -> a
    java.awt.dnd.DragSource dragSource -> a
    int dragTabIndex -> a
    boolean hasGhost -> a
    void <init>(javax.swing.JFrame) -> <init>
    void paintComponent(java.awt.Graphics) -> paintComponent
    java.awt.geom.Rectangle2D access$000(utils.swing.DnDTabbedPane) -> a
    utils.swing.GhostGlassPane access$100(utils.swing.DnDTabbedPane) -> a
    int access$200(utils.swing.DnDTabbedPane,java.awt.Point) -> a
    java.awt.Rectangle access$300(utils.swing.DnDTabbedPane) -> a
    int access$400(utils.swing.DnDTabbedPane) -> a
    int access$402(utils.swing.DnDTabbedPane,int) -> a
    void access$500(utils.swing.DnDTabbedPane,java.awt.Component,java.awt.Point) -> a
    void access$600(utils.swing.DnDTabbedPane,int) -> a
    void access$700(utils.swing.DnDTabbedPane,int) -> b
    void access$800(utils.swing.DnDTabbedPane,int,int) -> a
utils.swing.DnDTabbedPane$1 -> aG:
    utils.swing.DnDTabbedPane this$0 -> a
    void <init>(utils.swing.DnDTabbedPane) -> <init>
    void dragEnter(java.awt.dnd.DragSourceDragEvent) -> dragEnter
    void dragExit(java.awt.dnd.DragSourceEvent) -> dragExit
    void dragOver(java.awt.dnd.DragSourceDragEvent) -> dragOver
    void dragDropEnd(java.awt.dnd.DragSourceDropEvent) -> dragDropEnd
    void dropActionChanged(java.awt.dnd.DragSourceDragEvent) -> dropActionChanged
utils.swing.DnDTabbedPane$2 -> aH:
    java.awt.datatransfer.DataFlavor FLAVOR -> a
    utils.swing.DnDTabbedPane this$0 -> a
    void <init>(utils.swing.DnDTabbedPane) -> <init>
    java.lang.Object getTransferData(java.awt.datatransfer.DataFlavor) -> getTransferData
    java.awt.datatransfer.DataFlavor[] getTransferDataFlavors() -> getTransferDataFlavors
    boolean isDataFlavorSupported(java.awt.datatransfer.DataFlavor) -> isDataFlavorSupported
utils.swing.DnDTabbedPane$3 -> aI:
    java.awt.datatransfer.Transferable val$t -> a
    java.awt.dnd.DragSourceListener val$dsl -> a
    utils.swing.DnDTabbedPane this$0 -> a
    void <init>(utils.swing.DnDTabbedPane,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener) -> <init>
    void dragGestureRecognized(java.awt.dnd.DragGestureEvent) -> dragGestureRecognized
utils.swing.DnDTabbedPane$CDropTargetListener -> aJ:
    utils.swing.DnDTabbedPane this$0 -> a
    void <init>(utils.swing.DnDTabbedPane) -> <init>
    void dragEnter(java.awt.dnd.DropTargetDragEvent) -> dragEnter
    void dragExit(java.awt.dnd.DropTargetEvent) -> dragExit
    void dropActionChanged(java.awt.dnd.DropTargetDragEvent) -> dropActionChanged
    void dragOver(java.awt.dnd.DropTargetDragEvent) -> dragOver
    void drop(java.awt.dnd.DropTargetDropEvent) -> drop
utils.swing.GhostGlassPane -> aK:
    java.awt.AlphaComposite composite -> a
    java.awt.Point location -> a
    java.awt.image.BufferedImage draggingGhost -> a
    void <init>() -> <init>
    void paintComponent(java.awt.Graphics) -> paintComponent
view.AboutFrame -> aL:
    javax.swing.JEditorPane jep -> a
    javax.swing.JButton jbtnOk -> a
    void <init>(java.lang.String) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void hyperlinkUpdate(javax.swing.event.HyperlinkEvent) -> hyperlinkUpdate
view.FileLocate -> aM:
    controller.fileaccess.UniverseParser universeParser -> a
    java.util.ArrayList fileLocateListeners -> a
    controller.fileaccess.UniverseParser getUniverseParser() -> a
    boolean hasUniverseParser() -> a
    boolean openUniverseFile(java.awt.Component) -> a
    void closeUniverseFile() -> a
    java.io.File askForSaveRoutesFile(java.awt.Component,java.io.File) -> a
    void addFileLocateListener$34eb720$38967d0e(gnu.trove.TIntCollection) -> a
    void fireUniverseFound() -> b
    void <clinit>() -> <clinit>
view.ListPanel -> aN:
    javax.swing.JTable list -> a
    view.MyTableRowSorter sorter -> a
    view.MyTableModel rtm -> a
    view.MyTableModel ltm -> b
    void <init>(view.MainContainer) -> <init>
    void initListTableModel() -> a
    void initComponents() -> b
    void addComponents() -> c
    void initActionsFileMenu() -> d
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void createLTM(int,int) -> a
view.ListPanelWithRaces -> aO:
    javax.swing.JTable selectRaces -> b
    java.util.Map races -> a
    void <init>(view.MainContainer) -> <init>
    void initListTableModel() -> a
    void initComponents() -> b
    void addComponents() -> c
    void initActionsFileMenu() -> d
    void tableChanged(javax.swing.event.TableModelEvent) -> tableChanged
    boolean checkForStandardTableChanged(javax.swing.event.TableModelEvent) -> a
    void filterTableByRace() -> e
view.MainContainer -> aP:
    utils.swing.DnDTabbedPane jtp -> a
    view.MainPanel mp -> a
    view.TradeRoutesPanel trc -> a
    view.ShipListPanel slc -> a
    view.WeaponListPanel wlc -> a
    view.NearestXListPanel nxlc -> a
    view.PlayerListPanel plp -> a
    void <init>() -> <init>
    boolean checkForUniverseFile() -> b
    void showShipList() -> f
    void showWeaponList() -> g
    void showNearestX() -> h
    void showPlayer() -> i
    void showRouteGenerator() -> j
    void showMainMenu() -> k
    void switchToTab(view.TheLazyTraderPanel) -> a
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
    void universeLocated() -> a_
    void universeLost() -> b
view.MainPanel -> aQ:
    javax.swing.JButton[] jbActionButtons -> a
    void <init>(view.MainContainer) -> <init>
    void initActionsFileMenu() -> d
    void initComponents() -> b
    void addComponents() -> c
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
view.MyTableModel -> aR:
    java.lang.String[] columnNames -> a
    java.lang.Object[][] data -> a
    boolean editable -> a
    java.text.DecimalFormat dfInt -> a
    java.text.DecimalFormat dfReal -> b
    void <init>(int,int) -> <init>
    int getColumnCount() -> getColumnCount
    int getRowCount() -> getRowCount
    java.lang.String getColumnName(int) -> getColumnName
    java.lang.Object getValueAt(int,int) -> getValueAt
    java.lang.Object getRealValueAt(int,int) -> a
    void setValueAt(java.lang.Object,int,int) -> setValueAt
    java.lang.Class getColumnClass(int) -> getColumnClass
    java.lang.Class getRealColumnClass(int) -> a
    boolean isCellEditable(int,int) -> isCellEditable
view.MyTableRowSorter -> aS:
    java.util.Comparator COMPARABLE_COMPARATOR -> a
    view.MyTableModel tableModel -> a
    void <init>() -> <init>
    void <init>(view.MyTableModel) -> <init>
    java.util.Comparator getComparator(int) -> getComparator
    java.lang.Class getColumnClass(int) -> a
    boolean useToString(int) -> useToString
    void <clinit>() -> <clinit>
view.MyTableRowSorter$ComparableComparator -> aT:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
view.MyTableRowSorter$TableRowSorterModelWrapper -> aU:
    view.MyTableRowSorter this$0 -> a
    void <init>(view.MyTableRowSorter) -> <init>
    int getColumnCount() -> getColumnCount
    int getRowCount() -> getRowCount
    java.lang.Object getValueAt(int,int) -> getValueAt
    java.lang.String getStringValueAt(int,int) -> getStringValueAt
    java.lang.Object getIdentifier(int) -> getIdentifier
    java.lang.Object getModel() -> getModel
view.NearestXListPanel -> aV:
    javax.swing.JTree itemsTree -> a
    utils.gui.JIntegerField sectorBox -> a
    utils.gui.JIntegerField plotToBox -> b
    view.swing.tree.FilterableTreeNode root -> a
    view.swing.tree.FilteredTreeModel treeModel -> a
    javax.swing.JTextArea routeDisplay -> a
    model.Distance[] storedDistances -> a
    java.lang.Object lastSearchedObject -> a
    void <init>(view.MainContainer) -> <init>
    void initComponents() -> b
    void addComponents() -> c
    void initListTableModel() -> a
    void valueChanged(javax.swing.event.TreeSelectionEvent) -> valueChanged
    void doPlotNearest(java.lang.Object) -> a
    void createLTM(int) -> a
    void filterTableByRace() -> e
    void tableChanged(javax.swing.event.TableModelEvent) -> tableChanged
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
view.PlayerListPanel -> aW:
    void <init>(view.MainContainer) -> <init>
    void initListTableModel() -> a
    void tableChanged(javax.swing.event.TableModelEvent) -> tableChanged
view.ShipListPanel -> aX:
    void <init>(view.MainContainer) -> <init>
    void initListTableModel() -> a
view.TheLazyTraderPanel -> aY:
    javax.swing.JMenuBar jmb -> a
    javax.swing.JMenu[] fileMenu -> a
    javax.swing.JMenuItem[] jmiFileOptions -> a
    javax.swing.JMenuItem[] jmiActionOptions -> b
    javax.swing.JMenuItem[] jmiViewOptions -> c
    javax.swing.JMenuItem[] jmiHelpOptions -> d
    view.AboutFrame aboutFrame -> a
    java.lang.String title -> a
    view.MainContainer parent -> a
    void <init>(view.MainContainer) -> <init>
    void initComponents() -> b
    void addComponents() -> c
    javax.swing.JPanel createLabelJComponentPair(java.lang.String,javax.swing.JComponent,int) -> a
    javax.swing.JPanel createLabelJComponentPair(java.lang.String,javax.swing.JComponent) -> a
    void initActionsFileMenu() -> d
    void createStandardMenuBar() -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    boolean standardActionChecks(java.awt.event.ActionEvent) -> a
    boolean checkQuit() -> a
    boolean checkSectorsFileOpened() -> b
    java.lang.String getTitle() -> a
view.TradeRoutesPanel -> aZ:
    javax.swing.JTextArea jta -> a
    javax.swing.JTable selectGoods -> a
    javax.swing.JTable selectRaces -> b
    java.util.Map races -> a
    java.util.Map goods -> b
    utils.gui.JIntegerField selectStart -> a
    utils.gui.JIntegerField selectEnd -> b
    utils.gui.JIntegerField selectMaxDistance -> c
    utils.gui.JIntegerField selectNumberPorts -> d
    utils.gui.JIntegerField selectNumberOfRoutes -> e
    utils.gui.JIntegerField routesForPort -> f
    javax.swing.JComboBox selectGalaxy -> a
    javax.swing.JComboBox selectDisplayType -> b
    javax.swing.JButton[] jbActionButtons -> a
    java.io.File saveRoutesFile -> a
    controller.RouteHandler routeHandler -> a
    controller.RouteSwingWorker rsw -> a
    javax.swing.JProgressBar progressBar -> a
    void <init>(view.MainContainer) -> <init>
    void initComponents() -> b
    void addComponents() -> c
    void initActionsFileMenu() -> d
    boolean askForSaveRoutesFile() -> c
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void doRouteGeneration() -> a
    void tableChanged(javax.swing.event.TableModelEvent) -> tableChanged
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
view.WeaponListPanel -> ba:
    void <init>(view.MainContainer) -> <init>
    void initListTableModel() -> a
view.swing.tree.FilterableTreeNode -> bb:
    java.util.Map races -> a
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,byte) -> <init>
    void setRaceFilter(java.util.Map) -> a
    boolean filterAllows() -> a
view.swing.tree.FilteredTreeModel -> bc:
    void <init>(view.swing.tree.FilterableTreeNode) -> <init>
    java.lang.Object getChild(java.lang.Object,int) -> getChild
    int getChildCount(java.lang.Object) -> getChildCount
